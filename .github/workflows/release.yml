name: 🚀 Release ARC MCP Server

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for manual release'
        required: false
        default: ''

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'

jobs:
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint
        run: npm run lint || true

      - name: 🏗️ Build
        run: npm run build

      - name: ✅ Validate Policy Engine
        run: |
          node --input-type=module -e "
            import('./build/engines/policy-engine.js').then(({ ArcPolicyEngine }) => {
              const engine = new ArcPolicyEngine();
              console.log('✅ Policy Engine: ' + engine.getRules().length + ' rules loaded');
            });
          "

      - name: ✅ Validate NL Parser
        run: |
          node --input-type=module -e "
            import('./build/utils/nl-intent.js').then(({ parseArcIntent }) => {
              const result = parseArcIntent('Install ARC controller');
              console.log('✅ NL Parser: Intent recognized as ' + result.intent);
            });
          "

      - name: 📋 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/
          retention-days: 1

  docker-build:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=sha,prefix=main-,enable=${{ github.ref == 'refs/heads/main' }}
          labels: |
            org.opencontainers.image.title=ARC MCP Server
            org.opencontainers.image.description=GitHub Actions Runner Controller MCP Server with AI-powered automation
            org.opencontainers.image.vendor=${{ github.repository_owner }}

      - name: 🐳 Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Generate changelog
        id: changelog
        run: |
          PREV_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          CHANGELOG_CONTENT="## Changes

          $(git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD)
          
          ## Features Included
          - ✅ Policy Engine with 12 ARC-specific rules
          - ✅ Natural Language Processing (16 intents)
          - ✅ AI-powered ARC installation
          - ✅ Comprehensive monitoring and troubleshooting
          - ✅ GitHub Actions integration
          - ✅ Docker registry support
          "
          
          echo "changelog<<CHANGELOG_EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGELOG_CONTENT" >> "$GITHUB_OUTPUT"
          echo "CHANGELOG_EOF" >> "$GITHUB_OUTPUT"

      - name: 🎉 Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ARC MCP Server ${{ github.ref_name }}
          body: |
            # 🚀 ARC MCP Server ${{ github.ref_name }}
            
            Enterprise-grade Model Context Protocol server for GitHub Actions Runner Controller (ARC) management.
            
            ## 🐳 Docker Images
            
            ```bash
            # Pull the image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            
            # Or use latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
            
            **Multi-architecture support:**
            - `linux/amd64` (x86_64)
            - `linux/arm64` (ARM64/Apple Silicon)
            
            ## ⚙️ Usage
            
            **Claude Desktop Configuration:**
            ```json
            {
              "mcpServers": {
                "arc-mcp": {
                  "command": "docker",
                  "args": [
                    "run", "-i", "--rm",
                    "-v", "${HOME}/.kube:/home/mcp/.kube:ro",
                    "-e", "GITHUB_TOKEN",
                    "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
                  ]
                }
              }
            }
            ```
            
            ## ✨ Key Features
            
            - 🤖 **AI-Powered Operations**: Natural language ARC management
            - 🛡️ **Policy Engine**: 12 built-in governance rules
            - 🚀 **Automated Installation**: AI-guided ARC deployment
            - 📊 **Monitoring**: Real-time cluster and runner status
            - 🔒 **Security**: Compliance checking and hardening
            - 💰 **Cost Optimization**: Resource management recommendations
            
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
